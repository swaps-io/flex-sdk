const base = 'https://github.com/swaps-io/flex-contracts/blob/main/contracts/';
const extension = '.sol';

// In `swaps-io/flex-contracts`: `find './contracts' -name '*.sol' -not -path '*test*' -print`
const paths = [
  'facets/FlexReceiveTokenFromFacet.sol',
  'facets/FlexSaveSendFacet.sol',
  'facets/FlexAllocateReceiveFacet.sol',
  'facets/FlexSendNativeFloatFacet.sol',
  'facets/FlexSettleNativeFacet.sol',
  'facets/FlexSendNativeFacet.sol',
  'facets/FlexSendTokenFloatFacet.sol',
  'facets/FlexSendTokenFacet.sol',
  'facets/FlexSettleNativeProofFacet.sol',
  'facets/FlexReceiveTokenFacet.sol',
  'facets/FlexReceiveNativeFacet.sol',
  'facets/FlexSettleTokenProofFacet.sol',
  'facets/views/domains/FlexReceiveTokenDomainFacet.sol',
  'facets/views/domains/FlexReceiveNativeDomainFacet.sol',
  'facets/views/domains/FlexSendNativeDomainFacet.sol',
  'facets/views/domains/FlexReceiveTokenFromDomainFacet.sol',
  'facets/views/domains/FlexSendNativeFloatDomainFacet.sol',
  'facets/views/domains/FlexSettleNativeProofDomainFacet.sol',
  'facets/views/domains/FlexSettleTokenProofDomainFacet.sol',
  'facets/views/domains/FlexSettleTokenDomainFacet.sol',
  'facets/views/domains/FlexSettleNativeDomainFacet.sol',
  'facets/views/domains/FlexSendTokenFloatDomainFacet.sol',
  'facets/views/domains/FlexSendTokenDomainFacet.sol',
  'facets/views/FlexReceiveHashFacet.sol',
  'facets/views/FlexSendSaveFacet.sol',
  'facets/views/FlexSendTimeFacet.sol',
  'facets/views/FlexSendHashFacet.sol',
  'facets/views/FlexReceiveStateFacet.sol',
  'facets/views/FlexProofVerifierFacet.sol',
  'facets/FlexSettleTokenFacet.sol',
  'facets/FlexAllocateSendFacet.sol',
  'standalone/FlexStandalone.sol',
  'proofs/send/FlexSendProofVerifier.sol',
  'proofs/send/interfaces/IFlexSendProofVerifier.sol',
  'proofs/send/interfaces/FlexSendProofData.sol',
  'proofs/send/interfaces/FlexSendProofError.sol',
  'externals/proofs/interfaces/IProofVerifier.sol',
  'libraries/storages/FlexSendStateBucket.sol',
  'libraries/storages/FlexSendSaveStateStorage.sol',
  'libraries/storages/FlexSendSaveStateBucket.sol',
  'libraries/storages/FlexReceiveStateBucket.sol',
  'libraries/storages/FlexSendStateStorage.sol',
  'libraries/storages/FlexReceiveStateStorage.sol',
  'libraries/constraints/FlexKeyConstraint.sol',
  'libraries/constraints/FlexAmountConstraint.sol',
  'libraries/constraints/FlexSignatureConstraint.sol',
  'libraries/constraints/FlexSendChronologyConstraint.sol',
  'libraries/constraints/FlexDeadlineConstraint.sol',
  'libraries/constraints/FlexEmptinessConstraint.sol',
  'libraries/constraints/FlexEarlinessConstraint.sol',
  'libraries/constraints/FlexReceiveStateConstraint.sol',
  'libraries/constraints/FlexProofConstraint.sol',
  'libraries/constraints/FlexSendPeriodConstraint.sol',
  'libraries/constraints/FlexAccumulatorConstraint.sol',
  'libraries/utilities/FlexHashAccumulator.sol',
  'libraries/utilities/FlexDomain.sol',
  'libraries/utilities/FlexEfficientHash.sol',
  'libraries/utilities/FlexHashTree.sol',
  'libraries/states/FlexReceiveStateUpdate.sol',
  'libraries/states/FlexStateAllocation.sol',
  'libraries/states/FlexSendStateUpdate.sol',
  'libraries/data/FlexReceiveFromData.sol',
  'libraries/data/FlexSendAllocateData.sol',
  'libraries/data/FlexSettleData.sol',
  'libraries/data/FlexReceiveAllocateData.sol',
  'libraries/data/FlexSendData.sol',
  'libraries/data/FlexSettleProofData.sol',
  'libraries/data/FlexSendAccumulatorData.sol',
  'libraries/data/FlexSendFloatData.sol',
  'libraries/data/FlexReceiveData.sol',
  'libraries/data/FlexSendBucketStateData.sol',
  'libraries/data/FlexSaveSendData.sol',
  'libraries/data/FlexReceiveBucketStateData.sol',
  'interfaces/IFlexReceiveToken.sol',
  'interfaces/IFlexReceiveNative.sol',
  'interfaces/IFlexSendNativeFloat.sol',
  'interfaces/IFlexReceiveTokenFrom.sol',
  'interfaces/IFlexSendNative.sol',
  'interfaces/enums/FlexReceiveState.sol',
  'interfaces/IFlexAllocateReceive.sol',
  'interfaces/IFlexSettleNative.sol',
  'interfaces/IFlexSendTokenFloat.sol',
  'interfaces/IFlexSaveSend.sol',
  'interfaces/IFlexSettleToken.sol',
  'interfaces/IFlexAllocateSend.sol',
  'interfaces/IFlexSettleNativeProof.sol',
  'interfaces/IFlexSettleTokenProof.sol',
  'interfaces/errors/FlexCallerError.sol',
  'interfaces/errors/FlexSignatureError.sol',
  'interfaces/errors/FlexAccumulatorError.sol',
  'interfaces/errors/FlexEarlinessError.sol',
  'interfaces/errors/FlexKeyError.sol',
  'interfaces/errors/FlexEmptinessError.sol',
  'interfaces/errors/FlexStateError.sol',
  'interfaces/errors/FlexDeadlineError.sol',
  'interfaces/errors/FlexAmountError.sol',
  'interfaces/errors/FlexChronologyError.sol',
  'interfaces/events/FlexReceive.sol',
  'interfaces/events/FlexRefund.sol',
  'interfaces/events/FlexSend.sol',
  'interfaces/events/FlexSendSave.sol',
  'interfaces/events/FlexSendAmount.sol',
  'interfaces/events/FlexSendFail.sol',
  'interfaces/events/FlexConfirm.sol',
  'interfaces/views/IFlexReceiveHash.sol',
  'interfaces/views/domains/IFlexSettleNativeDomain.sol',
  'interfaces/views/domains/IFlexReceiveTokenFromDomain.sol',
  'interfaces/views/domains/IFlexSendTokenFloatDomain.sol',
  'interfaces/views/domains/IFlexSendNativeDomain.sol',
  'interfaces/views/domains/IFlexReceiveNativeDomain.sol',
  'interfaces/views/domains/IFlexSettleNativeProofDomain.sol',
  'interfaces/views/domains/IFlexReceiveTokenDomain.sol',
  'interfaces/views/domains/IFlexSendTokenDomain.sol',
  'interfaces/views/domains/IFlexSettleTokenDomain.sol',
  'interfaces/views/domains/IFlexSendNativeFloatDomain.sol',
  'interfaces/views/domains/IFlexSettleTokenProofDomain.sol',
  'interfaces/views/IFlexSendSave.sol',
  'interfaces/views/IFlexProofVerifier.sol',
  'interfaces/views/IFlexSendTime.sol',
  'interfaces/views/IFlexReceiveState.sol',
  'interfaces/views/IFlexSendHash.sol',
  'interfaces/IFlexSendToken.sol',
];

const map = {};
for (const path of paths) {
  if (!path.endsWith(extension)) {
    console.warn(`Path "${path}" has unexpected contract extension, skipping`);
    continue;
  }

  const nameStart = path.lastIndexOf('/') + 1;
  const name = path.slice(nameStart, -extension.length);
  map[name] = base + path;
}

export default map;
