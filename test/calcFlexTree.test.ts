import { SimpleMerkleTree } from '@openzeppelin/merkle-tree';

import { FlexTree, Hex, flexCalcTree } from '../src';

interface FlexTreeData {
  tree: Hex[];
  values: Record<Hex, number>;
}

function dump(tree: FlexTree): FlexTreeData {
  if (!(tree.inner instanceof SimpleMerkleTree)) {
    throw new Error('Unexpected tree implementation');
  }

  const dump = tree.inner.dump();
  const data: FlexTreeData = {
    tree: dump.tree as Hex[],
    values: Object.fromEntries(dump.values.map(({ value, treeIndex }) => [value, treeIndex])),
  };
  return data;
}

test('Should not calc tree from 0 leaves', () => {
  expect(() => {
    flexCalcTree({
      leaves: [],
    });
  }).toThrow(Error);
});

test('Should calc tree from 1 leaf', () => {
  const tree = flexCalcTree({
    leaves: ['0x1111111111111111111111111111111111111111111111111111111111111111'],
  });
  expect(dump(tree)).toEqual({
    tree: ['0x1111111111111111111111111111111111111111111111111111111111111111'],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 0,
    },
  });
});

test('Should calc tree from 2 leaves', () => {
  const tree = flexCalcTree({
    leaves: [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
    ],
  });
  expect(dump(tree)).toEqual({
    tree: [
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 2,
      '0x2222222222222222222222222222222222222222222222222222222222222222': 1,
    },
  });
});

test('Should not calc tree from 2 leaves with duplicate', () => {
  expect(() => {
    flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x1111111111111111111111111111111111111111111111111111111111111111',
      ],
    });
  }).toThrow(Error);
});

test('Should calc tree from 3 leaves', () => {
  const tree = flexCalcTree({
    leaves: [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
    ],
  });
  expect(dump(tree)).toEqual({
    tree: [
      '0x87fbd8dad686d9536b2ef65757c3415df1b7a4664deb34eda3d91234936eb5fe',
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 4,
      '0x2222222222222222222222222222222222222222222222222222222222222222': 3,
      '0x3333333333333333333333333333333333333333333333333333333333333333': 2,
    },
  });
});

test('Should not calc tree from 3 leaves with duplicate', () => {
  expect(() => {
    flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
        '0x1111111111111111111111111111111111111111111111111111111111111111',
      ],
    });
  }).toThrow(Error);
});

test('Should calc tree from 4 leaves', () => {
  const tree = flexCalcTree({
    leaves: [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
    ],
  });
  expect(dump(tree)).toEqual({
    tree: [
      '0x037fd715441fd2ad3d0377ef74079ad743d29c09303ca301614df1ad14da48a7',
      '0xc502f868a3f2d78c5adf18b41f606fc4c6cd8a4a9838125f03aadf235245b910',
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 6,
      '0x2222222222222222222222222222222222222222222222222222222222222222': 5,
      '0x3333333333333333333333333333333333333333333333333333333333333333': 4,
      '0x4444444444444444444444444444444444444444444444444444444444444444': 3,
    },
  });
});

test('Should calc tree from 5 leaves', () => {
  const tree = flexCalcTree({
    leaves: [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x5555555555555555555555555555555555555555555555555555555555555555',
    ],
  });
  expect(dump(tree)).toEqual({
    tree: [
      '0x46911bbb50261adb58bcf20b8f9e9931c31841c5be43fec112727567c596b846',
      '0x1c5298a5cf72a7725c533fe7ab5883c8c6c54b72989d5464c89a000908a76907',
      '0xc502f868a3f2d78c5adf18b41f606fc4c6cd8a4a9838125f03aadf235245b910',
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
      '0x5555555555555555555555555555555555555555555555555555555555555555',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 8,
      '0x2222222222222222222222222222222222222222222222222222222222222222': 7,
      '0x3333333333333333333333333333333333333333333333333333333333333333': 6,
      '0x4444444444444444444444444444444444444444444444444444444444444444': 5,
      '0x5555555555555555555555555555555555555555555555555555555555555555': 4,
    },
  });
});

test('Should calc tree from 11 leaves', () => {
  const tree = flexCalcTree({
    leaves: [
      '0x1111111111111111111111111111111111111111111111111111111111111111',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x5555555555555555555555555555555555555555555555555555555555555555',
      '0x6666666666666666666666666666666666666666666666666666666666666666',
      '0x7777777777777777777777777777777777777777777777777777777777777777',
      '0x8888888888888888888888888888888888888888888888888888888888888888',
      '0x9999999999999999999999999999999999999999999999999999999999999999',
      '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
    ],
  });
  expect(dump(tree)).toEqual({
    tree: [
      '0xd97496e361db5f21faf3acfebe8f66410d62c6a7b8259a8cc6167613aa678c56',
      '0x8bc369ada0d9f4fbf37069ac0b0baeb6bdf8eac6a59c460d94115c1cc7c376b4',
      '0x0216b9f8dcaca4539bb498dfa20c2e255e2f08dde330e18a471f96b998389289',
      '0xd8dc312667e71b16d342ad703ed9b8ab41dd35f2aeba58b13ace616dd63e7e77',
      '0xb8aa510a6d898be150e4b49ad08c4892c3b11d8e268141f593e0bb3eacef126b',
      '0xd85b2abebd029d4618f333ed1bd8b971810b03ef0aa0339afefccf710d738354',
      '0x2dc242daf280a11f41caad16109b7626a3865eb91064fded88387237f74cf7da',
      '0xee673dead18e0bd840c75d973babf38f2a3527cf5b86621d5ed7a30b62d247c7',
      '0xc502f868a3f2d78c5adf18b41f606fc4c6cd8a4a9838125f03aadf235245b910',
      '0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871',
      '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
      '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      '0x9999999999999999999999999999999999999999999999999999999999999999',
      '0x8888888888888888888888888888888888888888888888888888888888888888',
      '0x7777777777777777777777777777777777777777777777777777777777777777',
      '0x6666666666666666666666666666666666666666666666666666666666666666',
      '0x5555555555555555555555555555555555555555555555555555555555555555',
      '0x4444444444444444444444444444444444444444444444444444444444444444',
      '0x3333333333333333333333333333333333333333333333333333333333333333',
      '0x2222222222222222222222222222222222222222222222222222222222222222',
      '0x1111111111111111111111111111111111111111111111111111111111111111',
    ],
    values: {
      '0x1111111111111111111111111111111111111111111111111111111111111111': 20,
      '0x2222222222222222222222222222222222222222222222222222222222222222': 19,
      '0x3333333333333333333333333333333333333333333333333333333333333333': 18,
      '0x4444444444444444444444444444444444444444444444444444444444444444': 17,
      '0x5555555555555555555555555555555555555555555555555555555555555555': 16,
      '0x6666666666666666666666666666666666666666666666666666666666666666': 15,
      '0x7777777777777777777777777777777777777777777777777777777777777777': 14,
      '0x8888888888888888888888888888888888888888888888888888888888888888': 13,
      '0x9999999999999999999999999999999999999999999999999999999999999999': 12,
      '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 11,
      '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb': 10,
    },
  });
});
