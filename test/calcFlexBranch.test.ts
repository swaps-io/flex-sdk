import { FlexHex, flexCalcBranch, flexCalcBranchHash, flexCalcTree, flexCalcTreeHash } from '../src';

test('Should not calc branch of tree with 1 mismatching leaf', () => {
  expect(() => {
    flexCalcBranch({
      tree: flexCalcTree({
        leaves: ['0x1111111111111111111111111111111111111111111111111111111111111111'],
      }),
      leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
    });
  }).toThrow(Error);
});

test('Should calc branch of tree with 1 leaf', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: ['0x1111111111111111111111111111111111111111111111111111111111111111'],
    }),
    leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
  });
  expect(branch).toEqual([]);
});

test('Should not calc branch of tree with 2 mismatching leaves', () => {
  expect(() => {
    flexCalcBranch({
      tree: flexCalcTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
        ],
      }),
      leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
    });
  }).toThrow(Error);
});

test('Should calc branch of tree with 2 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
      ],
    }),
    leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
  });
  expect(branch).toEqual(['0x2222222222222222222222222222222222222222222222222222222222222222']);
});

test('Should calc 2nd branch of tree with 2 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
      ],
    }),
    leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
  });
  expect(branch).toEqual(['0x1111111111111111111111111111111111111111111111111111111111111111']);
});

test('Should not calc branch of tree with 3 mismatching leaves', () => {
  expect(() => {
    flexCalcBranch({
      tree: flexCalcTree({
        leaves: [
          '0x1111111111111111111111111111111111111111111111111111111111111111',
          '0x2222222222222222222222222222222222222222222222222222222222222222',
          '0x3333333333333333333333333333333333333333333333333333333333333333',
        ],
      }),
      leaf: '0x4444444444444444444444444444444444444444444444444444444444444444',
    });
  }).toThrow(Error);
});

test('Should calc branch of tree with 3 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
        '0x3333333333333333333333333333333333333333333333333333333333333333',
      ],
    }),
    leaf: '0x1111111111111111111111111111111111111111111111111111111111111111',
  });
  expect(branch).toEqual([
    '0x2222222222222222222222222222222222222222222222222222222222222222',
    '0x3333333333333333333333333333333333333333333333333333333333333333',
  ]);
});

test('Should calc 2nd branch of tree with 3 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
        '0x3333333333333333333333333333333333333333333333333333333333333333',
      ],
    }),
    leaf: '0x2222222222222222222222222222222222222222222222222222222222222222',
  });
  expect(branch).toEqual([
    '0x1111111111111111111111111111111111111111111111111111111111111111',
    '0x3333333333333333333333333333333333333333333333333333333333333333',
  ]);
});

test('Should calc 3rd branch of tree with 3 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
        '0x3333333333333333333333333333333333333333333333333333333333333333',
      ],
    }),
    leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
  });
  expect(branch).toEqual(['0x3e92e0db88d6afea9edc4eedf62fffa4d92bcdfc310dccbe943747fe8302e871']);
});

test('Should calc branch of tree with 7 leaves', () => {
  const branch = flexCalcBranch({
    tree: flexCalcTree({
      leaves: [
        '0x1111111111111111111111111111111111111111111111111111111111111111',
        '0x2222222222222222222222222222222222222222222222222222222222222222',
        '0x3333333333333333333333333333333333333333333333333333333333333333',
        '0x4444444444444444444444444444444444444444444444444444444444444444',
        '0x5555555555555555555555555555555555555555555555555555555555555555',
        '0x6666666666666666666666666666666666666666666666666666666666666666',
        '0x7777777777777777777777777777777777777777777777777777777777777777',
      ],
    }),
    leaf: '0x3333333333333333333333333333333333333333333333333333333333333333',
  });
  expect(branch).toEqual([
    '0x4444444444444444444444444444444444444444444444444444444444444444',
    '0xee673dead18e0bd840c75d973babf38f2a3527cf5b86621d5ed7a30b62d247c7',
    '0xa66456f46c4e6e9c788dbeac5963cc72bdb924c97324d99c55988193e65e92fe',
  ]);
});

test('Should calc every branch of tree with 11 leaves', () => {
  const leaves: FlexHex[] = [
    '0x1111111111111111111111111111111111111111111111111111111111111111',
    '0x2222222222222222222222222222222222222222222222222222222222222222',
    '0x3333333333333333333333333333333333333333333333333333333333333333',
    '0x4444444444444444444444444444444444444444444444444444444444444444',
    '0x5555555555555555555555555555555555555555555555555555555555555555',
    '0x6666666666666666666666666666666666666666666666666666666666666666',
    '0x7777777777777777777777777777777777777777777777777777777777777777',
    '0x8888888888888888888888888888888888888888888888888888888888888888',
    '0x9999999999999999999999999999999999999999999999999999999999999999',
    '0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
    '0xBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB',
  ];

  const tree = flexCalcTree({ leaves });

  const treeHash = flexCalcTreeHash({ tree });

  for (const leaf of leaves) {
    const branch = flexCalcBranch({ tree, leaf });
    const branchHash = flexCalcBranchHash({ leaf, branch });
    expect(branchHash).toEqual(treeHash);
  }
});
